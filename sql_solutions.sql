create schema OnlineShoppingDB;
use OnlineShoppingDB;

#(Basic Problems) 
# 1. List all unique cities where customers are located.

SELECT DISTINCT
    (customer_city)
FROM
    customers
ORDER BY customer_city ASC;

# Basic Problems
# 2. Count the number of orders placed in 2017

SELECT 
    COUNT(order_id) as total_orders_in_2017
FROM
    orders
WHERE
    YEAR(order_purchase_timestamp) = '2017';
    
# Basic Problems
# 3. Find the Total Sales per Category

select pro.product_category_name as Product_Category, sum(oi.price) as Total_Sales
from order_items as oi
join products as pro
on oi.product_id = pro.product_id
group by pro.product_category_name
order by Total_Sales desc;

# Basic Problems
# 4. Calculate the percentage of orders that were paid in installments.

select * from payments;

SELECT 
    round((SELECT 
            COUNT(order_id)
        FROM
            payments
        WHERE
            payment_installments > 1) / (SELECT 
            COUNT(order_id) 
        FROM
            payments)*100,2)  AS percentage_of_orders_paid_in_installments
FROM
    payments 
    limit 1;
    
# Basic Problems
# 5. Count the number of customers from each state.

SELECT 
    customer_state, COUNT(customer_id) AS total_customers
FROM
    customers
GROUP BY customer_state
ORDER BY total_customers DESC;

# Intermediate Porblems
# 1. Calculate the number of ordes per month in 2018.

SELECT 
    months, COUNT(order_id) AS num_of_orders
FROM
    (SELECT 
        order_id, MONTHNAME(order_purchase_timestamp) AS months
    FROM
        orders
    WHERE
        YEAR(order_purchase_timestamp) = '2018') AS 2018_orders
GROUP BY months
order by 
case 
when months = 'January' then 1
when months = 'February' then 2
when months = 'March' then 3
when months = 'April' then 4
when months = 'May' then 5
when months = 'June' then 6
when months = 'July' then 7
when months = 'August' then 8
when months = 'September' then 9
when months = 'October' then 10
when months = 'November' then 11
when months = 'December' then 12 
end	;

# Intermediate Problems
# 2. Find the average number of products per order, group by customer city.

select c.customer_city, avg(oi.total_product) as avg_product_per_order
from customers as c 
join orders as o 
on c.customer_id = o.customer_id
join 
(select order_id, count(product_id) as total_product from order_items group by order_id) as oi
on oi.order_id = o.order_id
group by c.customer_city
order by avg_product_per_order desc;

# Intermediate Problems 
# 3. Calculate the percentage of total revenue contributed by each product category.

select p.product_category_name, sum(pay.payment_value) as total_revenue, round(sum(pay.payment_value)/(select sum(payment_value) from payments)*100,2) as revenue_percentage
from payments as pay
join orders o 
on o.order_id = pay.order_id
join order_items as oi
on oi.order_id = o.order_id
join products p 
on p.product_id = oi.product_id
group by p.product_category_name
order by revenue_percentage desc;

# intermediate problems
# 4. identify the correlation between product price and the number of times a product has been purchased. 

select oi.product_id, p.product_category_name, oi.price as product_price, count(oi.product_id) as num_of_purchases
from order_items oi 
join products p
on oi.product_id = p.product_id
group by oi.product_id, p.product_category_name, oi.price
order by num_of_purchases desc;

# intermediate problems
# 5. calculate the total revenue generated by each seller and rank them by revenue. 

select s.seller_id, sum(p.payment_value) as total_revenue, rank() over (order by sum(p.payment_value) desc) as rankings
from sellers s
join order_items oi 
on s.seller_id = oi.seller_id
join payments p 
on p.order_id = oi.order_id
group by s.seller_id
order by rankings; 

# advance problems
# 1. calculate the moving average of order values for each customer over their order history. 

select o.customer_id, o.order_id, o.order_purchase_timestamp, oi.price as order_value, 
		avg(oi.price) over (partition by o.customer_id order by o.order_purchase_timestamp rows between 2 preceding and current row) as moving_avg
        
from orders o
join order_items oi 
on o.order_id = oi.order_id
order by moving_avg desc;

# advance problems
# 2. calculate the cumulative sales per month for each year.

select year(o.order_purchase_timestamp) as years, month(o.order_purchase_timestamp) as month_num, sum(oi.price) as total_sales,
		sum(sum(oi.price)) over ( partition by year(o.order_purchase_timestamp) order by month(o.order_purchase_timestamp)) as cumulative_sales
        
from orders o
join order_items oi 
on o.order_id = oi.order_id
group by year(o.order_purchase_timestamp),month(o.order_purchase_timestamp)
order by years,month_num;

# advance problems
# 3. calculate the year-over-year growth rate of total sales.

select year(o.order_purchase_timestamp) as years, sum(oi.price) as total_sales, 
lag(sum(oi.price)) over (order by year(o.order_purchase_timestamp)) as prev_year_sales,
case when lag(sum(oi.price)) over (order by year(o.order_purchase_timestamp)) is null then 0 
else (sum(oi.price) - lag(sum(oi.price)) over (order by year(o.order_purchase_timestamp))) / lag(sum(oi.price)) over (order by year(o.order_purchase_timestamp))*100 end as yoy_growth_rate
from orders o
join order_items oi
on o.order_id = oi.order_id
group by year(o.order_purchase_timestamp)
order by years;

# advance problems
# 4. calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase. 

with first_purchase_date as (select customer_id, min(order_purchase_timestamp) as first_purchase_date from orders group by customer_id),
		repeat_customer as ( select fp.customer_id, count(o.order_id) as additional_purchases from first_purchase_date fp left join orders o on fp.customer_id = o.customer_id and o.order_purchase_timestamp>fp.first_purchase_date and o.order_purchase_timestamp <= date_add(fp.first_purchase_date, interval 6 month) group by fp.customer_id )
        
select (select count(*) from first_purchase_date) as total_customers, (select count(*) from repeat_customer where additional_purchases > 0) as retained_customers,
 round( (select count(*) from repeat_customer where additional_purchases > 0)*100 / (select count(*) from first_purchase_date),2) as retention_rate;
 
 #confirmation for retention rate
 select customer_id, count(order_id) as order_count
 from orders
 group by customer_id
 having order_count > 1
 limit 10;
 
 # advance problems 
# 5. identify the top 3 customers who spent the most money in each year. 

with customer_spending as ( select o.customer_id, year(o.order_purchase_timestamp) as order_year, sum(oi.price) as total_spent from orders o join order_items oi on o.order_id=oi.order_id group by o.customer_id, year(o.order_purchase_timestamp)),
ranked_customers as ( select customer_id, order_year,total_spent, rank() over (partition by order_year order by total_spent desc) as ranks from customer_spending )

select order_year, customer_id, total_spent 
from ranked_customers
where ranks <= 3
order by order_year, ranks;

#end 
